/**
 * Hierarchical Category Manager AMD module
 *
 * @module     profilefield_hierarchical_menu/category_manager
 * @copyright  2024 DL Company
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

define(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events'], 
    function($, Str, ModalFactory, ModalEvents) {
    
        var CategoryManager = {
            
            // Maximum nesting levels (3 levels: root -> level1 -> level2)
            MAX_LEVELS: 3,
            
            // Current category data structure
            categoryData: {
                root: {
                    items: []
                }
            },
            
            /**
             * Initialize the category manager
             */
            init: function() {
                console.log('Initializing hierarchical category manager');
                var self = this;
                
                // Wait for DOM to be ready
                $(document).ready(function() {
                    self.bindEvents();
                    self.loadExistingData();
                    self.renderTree();
                });
            },
            
            /**
             * Bind event handlers
             */
            bindEvents: function() {
                var self = this;
                
                // Remove existing event handlers to prevent duplicates
                $('#add-root-category').off('click');
                $('#category-tree').off('click');
                
                // Add root category button
                $('#add-root-category').on('click', function(e) {
                    e.preventDefault();
                    console.log('Add root category clicked');
                    self.showAddCategoryModal(null, 0);
                });
                
                // Delegate events for dynamically created elements
                $('#category-tree').on('click', '.add-subcategory', function(e) {
                    e.preventDefault();
                    var categoryId = $(this).data('category-id');
                    var level = parseInt($(this).data('level'));
                    console.log('Add subcategory clicked for:', categoryId, 'level:', level);
                    self.showAddCategoryModal(categoryId, level + 1);
                });
                
                $('#category-tree').on('click', '.edit-category', function(e) {
                    e.preventDefault();
                    var categoryId = $(this).data('category-id');
                    console.log('Edit category clicked for:', categoryId);
                    self.showEditCategoryModal(categoryId);
                });
                
                $('#category-tree').on('click', '.delete-category', function(e) {
                    e.preventDefault();
                    var categoryId = $(this).data('category-id');
                    console.log('Delete category clicked for:', categoryId);
                    self.showDeleteConfirmation(categoryId);
                });
            },
            
            /**
             * Load existing data from the hidden textarea
             */
            loadExistingData: function() {
                var jsonData = $('textarea[name="param1"]').val();
                console.log('Loading existing data:', jsonData);
                if (jsonData && jsonData.trim() !== '') {
                    try {
                        this.categoryData = JSON.parse(jsonData);
                        if (!this.categoryData.root || !this.categoryData.root.items) {
                            this.categoryData = { root: { items: [] } };
                        }
                    } catch (e) {
                        console.warn('Invalid JSON data in param1, initializing empty structure');
                        this.categoryData = { root: { items: [] } };
                    }
                }
            },
            
            /**
             * Save current data to hidden textarea
             */
            saveData: function() {
                var jsonString = JSON.stringify(this.categoryData);
                console.log('Saving data:', jsonString);
                $('textarea[name="param1"]').val(jsonString);
            },
            
            /**
             * Render the category tree
             */
            renderTree: function() {
                var $container = $('#category-tree');
                $container.empty();
                
                if (this.categoryData.root.items.length === 0) {
                    $container.html('<p class="text-muted">No categories defined yet. Click "Add Root Category" to start.</p>');
                    return;
                }
                
                var treeHtml = this.renderTreeLevel(this.categoryData.root.items, 0);
                $container.html('<ul class="category-tree-root">' + treeHtml + '</ul>');
            },
            
            /**
             * Render a specific level of the tree
             */
            renderTreeLevel: function(items, level) {
                var html = '';
                var self = this;
                
                items.forEach(function(item, index) {
                    var categoryId = level + '-' + index;
                    var hasChildren = item.childs && item.childs.length > 0;
                    var canAddChildren = level < (self.MAX_LEVELS - 1);
                    
                    html += '<li class="category-item level-' + level + '" data-category-id="' + categoryId + '">';
                    html += '<div class="category-content">';
                    html += '<span class="category-name">' + self.escapeHtml(item.name) + '</span>';
                    html += '<div class="category-actions">';
                    
                    if (canAddChildren) {
                        html += '<button type="button" class="btn btn-sm btn-outline-primary add-subcategory" ' +
                               'data-category-id="' + categoryId + '" data-level="' + level + '" title="Add Subcategory">';
                        html += '+ Sub</button>';
                    }
                    
                    html += '<button type="button" class="btn btn-sm btn-outline-secondary edit-category" ' +
                           'data-category-id="' + categoryId + '" title="Edit Category">';
                    html += 'Edit</button>';
                    
                    html += '<button type="button" class="btn btn-sm btn-outline-danger delete-category" ' +
                           'data-category-id="' + categoryId + '" title="Delete Category">';
                    html += 'Delete</button>';
                    
                    html += '</div></div>';
                    
                    if (hasChildren) {
                        html += '<ul class="category-children">';
                        html += self.renderTreeLevel(item.childs, level + 1);
                        html += '</ul>';
                    }
                    
                    html += '</li>';
                });
                
                return html;
            },
            
            /**
             * Show modal to add a new category
             */
            showAddCategoryModal: function(parentId, level) {
                var self = this;
                
                if (level >= this.MAX_LEVELS) {
                    alert('Maximum nesting level (3) reached. Cannot add more subcategories.');
                    return;
                }
                
                var title = level === 0 ? 'Add Root Category' : 'Add Subcategory';
                
                ModalFactory.create({
                    type: ModalFactory.types.SAVE_CANCEL,
                    title: title,
                    body: '<div class="form-group">' +
                          '<label for="category-name-input">Category Name:</label>' +
                          '<input type="text" id="category-name-input" class="form-control" placeholder="Enter category name">' +
                          '</div>'
                }).then(function(modal) {
                    modal.getRoot().on(ModalEvents.save, function(e) {
                        e.preventDefault();
                        var categoryName = modal.getRoot().find('#category-name-input').val().trim();
                        console.log('Modal save - category name:', categoryName);
                        if (categoryName === '') {
                            alert('Category name cannot be empty.');
                            return;
                        }
                        
                        self.addCategory(parentId, categoryName);
                        modal.destroy();
                    });
                    
                    modal.getRoot().on(ModalEvents.cancel, function() {
                        modal.destroy();
                    });
                    
                    modal.show();
                    
                    // Focus on input when modal is shown
                    modal.getRoot().on(ModalEvents.shown, function() {
                        modal.getRoot().find('#category-name-input').focus();
                    });
                }).catch(function(error) {
                    console.error('Error creating modal:', error);
                });
            },
            
            /**
             * Show modal to edit an existing category
             */
            showEditCategoryModal: function(categoryId) {
                var self = this;
                var category = this.findCategoryById(categoryId);
                
                if (!category) {
                    console.error('Category not found:', categoryId);
                    return;
                }
                
                ModalFactory.create({
                    type: ModalFactory.types.SAVE_CANCEL,
                    title: 'Edit Category',
                    body: '<div class="form-group">' +
                          '<label for="category-name-input">Category Name:</label>' +
                          '<input type="text" id="category-name-input" class="form-control" value="' + 
                          this.escapeHtml(category.name) + '">' +
                          '</div>'
                }).then(function(modal) {
                    modal.getRoot().on(ModalEvents.save, function(e) {
                        e.preventDefault();
                        var categoryName = modal.getRoot().find('#category-name-input').val().trim();
                        if (categoryName === '') {
                            alert('Category name cannot be empty.');
                            return;
                        }
                        
                        self.editCategory(categoryId, categoryName);
                        modal.destroy();
                    });
                    
                    modal.getRoot().on(ModalEvents.cancel, function() {
                        modal.destroy();
                    });
                    
                    modal.show();
                    
                    // Focus and select text when modal is shown
                    modal.getRoot().on(ModalEvents.shown, function() {
                        modal.getRoot().find('#category-name-input').focus().select();
                    });
                }).catch(function(error) {
                    console.error('Error creating edit modal:', error);
                });
            },
            
            /**
             * Show delete confirmation
             */
            showDeleteConfirmation: function(categoryId) {
                var self = this;
                
                if (confirm('Are you sure you want to delete this category and all its subcategories?')) {
                    self.deleteCategory(categoryId);
                }
            },
            
            /**
             * Add a new category
             */
            addCategory: function(parentId, name) {
                console.log('Adding category:', name, 'to parent:', parentId);
                var newCategory = {
                    name: name,
                    childs: []
                };
                
                if (parentId === null) {
                    // Add to root
                    this.categoryData.root.items.push(newCategory);
                } else {
                    // Add to specific parent
                    var parent = this.findCategoryById(parentId);
                    if (parent) {
                        if (!parent.childs) {
                            parent.childs = [];
                        }
                        parent.childs.push(newCategory);
                    } else {
                        console.error('Parent category not found:', parentId);
                        return;
                    }
                }
                
                this.saveData();
                this.renderTree();
            },
            
            /**
             * Edit an existing category
             */
            editCategory: function(categoryId, newName) {
                console.log('Editing category:', categoryId, 'new name:', newName);
                var category = this.findCategoryById(categoryId);
                if (category) {
                    category.name = newName;
                    this.saveData();
                    this.renderTree();
                } else {
                    console.error('Category not found for edit:', categoryId);
                }
            },
            
            /**
             * Delete a category
             */
            deleteCategory: function(categoryId) {
                console.log('Deleting category:', categoryId);
                if (this.removeCategoryById(categoryId)) {
                    this.saveData();
                    this.renderTree();
                } else {
                    console.error('Failed to delete category:', categoryId);
                }
            },
            
            /**
             * Find a category by its ID
             */
            findCategoryById: function(categoryId) {
                var parts = categoryId.split('-');
                var current = this.categoryData.root.items;
                
                for (var i = 0; i < parts.length; i++) {
                    var index = parseInt(parts[i]);
                    if (isNaN(index) || index < 0 || index >= current.length) {
                        return null;
                    }
                    
                    if (i === parts.length - 1) {
                        return current[index];
                    } else {
                        if (current[index] && current[index].childs) {
                            current = current[index].childs;
                        } else {
                            return null;
                        }
                    }
                }
                
                return null;
            },
            
            /**
             * Remove a category by its ID
             */
            removeCategoryById: function(categoryId) {
                var parts = categoryId.split('-');
                var current = this.categoryData.root.items;
                
                for (var i = 0; i < parts.length - 1; i++) {
                    var index = parseInt(parts[i]);
                    if (isNaN(index) || index < 0 || index >= current.length) {
                        return false;
                    }
                    
                    if (current[index] && current[index].childs) {
                        current = current[index].childs;
                    } else {
                        return false;
                    }
                }
                
                var finalIndex = parseInt(parts[parts.length - 1]);
                if (isNaN(finalIndex) || finalIndex < 0 || finalIndex >= current.length) {
                    return false;
                }
                
                current.splice(finalIndex, 1);
                return true;
            },
            
            /**
             * Escape HTML characters
             */
            escapeHtml: function(text) {
                var div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        };
        
        return CategoryManager;
    });
    